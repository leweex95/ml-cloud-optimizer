version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U airflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  airflow-webserver:
    build:
      context: ..
      dockerfile: deploy/docker/Dockerfile
    command: airflow webserver
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW_HOME: /airflow
      AIRFLOW__CORE__DAGS_FOLDER: /airflow/dags
      AIRFLOW__CORE__PLUGINS_FOLDER: /airflow/plugins
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: 'False'
      AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'True'
      AIRFLOW_FERNET_KEY: d60OMRyUOF2v8ZBw2rkd8m0-P0jvA1F9N8N0dT9h3dI=
    ports:
      - "8080:8080"
    volumes:
      - ./dags:/airflow/dags
      - ./logs:/airflow/logs
      - ./plugins:/airflow/plugins
      - ../data:/app/data
      - ../models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  airflow-scheduler:
    build:
      context: ..
      dockerfile: deploy/docker/Dockerfile
    command: airflow scheduler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW_HOME: /airflow
      AIRFLOW__CORE__DAGS_FOLDER: /airflow/dags
      AIRFLOW__CORE__PLUGINS_FOLDER: /airflow/plugins
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: 'False'
      AIRFLOW_FERNET_KEY: d60OMRyUOF2v8ZBw2rkd8m0-P0jvA1F9N8N0dT9h3dI=
    volumes:
      - ./dags:/airflow/dags
      - ./logs:/airflow/logs
      - ./plugins:/airflow/plugins
      - ../data:/app/data
      - ../models:/app/models

  airflow-worker:
    build:
      context: ..
      dockerfile: deploy/docker/Dockerfile
    command: celery worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      AIRFLOW_HOME: /airflow
      AIRFLOW__CORE__DAGS_FOLDER: /airflow/dags
      AIRFLOW__CORE__PLUGINS_FOLDER: /airflow/plugins
      AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__CELERY__RESULT_BACKEND: postgresql://airflow:airflow@postgres:5432/airflow
      AIRFLOW__CORE__LOAD_EXAMPLES: 'False'
      AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: 'False'
      AIRFLOW_FERNET_KEY: d60OMRyUOF2v8ZBw2rkd8m0-P0jvA1F9N8N0dT9h3dI=
    volumes:
      - ./dags:/airflow/dags
      - ./logs:/airflow/logs
      - ./plugins:/airflow/plugins
      - ../data:/app/data
      - ../models:/app/models
    deploy:
      replicas: 2

  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    command: mlflow server --backend-store-uri sqlite:///mlflow.db --default-artifact-root /mlflow --host 0.0.0.0
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
    environment:
      MLFLOW_BACKEND_STORE_URI: sqlite:////mlflow/mlflow.db
      MLFLOW_DEFAULT_ARTIFACT_ROOT: /mlflow/artifacts

volumes:
  postgres_data:
  mlflow_data:
